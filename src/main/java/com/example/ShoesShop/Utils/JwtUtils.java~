package com.example.ShoesShop.Utils;


import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.Date;
import java.util.function.Function;

import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import com.example.ShoesShop.Entity.User;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;


@Service
public class JwtUtils {

    private final long EXPIRATION_TIME;

    private final SecretKey Key;

    public JwtUtils(@Value("${JWT_SECRET_KEY}") String secretKey,
                    @Value("${EXPIRATION_TIME}") long expirationTime) {
        byte[] keyBytes = Base64.getDecoder().decode(secretKey.getBytes(StandardCharsets.UTF_8));
        this.Key = new SecretKeySpec(keyBytes, "HmacSHA256");
        this.EXPIRATION_TIME = expirationTime;
    }
    public String generateToken(UserDetails userDetails,Long userId){
//        Map<String, Object> claims = new HashMap<>();
//        claims.put("userId", userId);
//        claims.put("role", userDetails.getAuthorities().iterator().next().getAuthority()); // Lấy role từ authorities
        System.out.println("USERNAME (EMAIL) TRONG TOKEN: " + userDetails.getUsername());

        // Cast UserDetails to User to access the getFullName method
        String fullName = "";
        if (userDetails instanceof User) {
            fullName = ( (User)userDetails).getFullName();
        }

        return Jwts.builder()
                .claim("userId", userId)  // Đặt từng claim riêng lẻ
                .claim("userName", fullName)
                .claim("role", userDetails.getAuthorities().iterator().next().getAuthority())
                .subject(userDetails.getUsername())
                .issuedAt(new Date(System.currentTimeMillis()))
                .expiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                .signWith(Key)
                .compact();
    }
    public String extractUsername(String token) {
        return extractClaims(token, Claims::getSubject);
    }

    private <T> T extractClaims(String token, Function<Claims, T> claimsTFunction) {
        return claimsTFunction.apply(Jwts.parser().verifyWith(Key).build().parseSignedClaims(token).getPayload());
    }
    public boolean isValidToken(String token, UserDetails userDetails) {
        final String username = extractUsername(token);
        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
    }
    public Long extractUserId(String token) {
        return extractClaims(token, claims -> claims.get("userId", Long.class));
    }

    private boolean isTokenExpired(String token) {
        return extractClaims(token, Claims::getExpiration).before(new Date());
    }
    public long getExpirationTime() {
        return EXPIRATION_TIME;
    }
}
